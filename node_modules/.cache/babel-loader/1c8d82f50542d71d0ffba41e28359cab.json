{"ast":null,"code":"import interact from 'interactjs';\nimport { createRef, createElement, Component } from 'react';\nvar options = ['draggable', 'resizable', 'gesturable', 'dropzone'];\nvar events = [// Interact Events\n'DragStart', 'DragMove', 'DragInertiaStart', 'DragEnd', 'ResizeStart', 'ResizeMove', 'ResizeInertiaStart', 'ResizeEnd', 'GestureStart', 'GestureMove', 'GestureEnd', // Drop Events\n'DropActivate', 'DropdEactivate', 'DragEnter', 'DragLeave', 'DropMove', 'Drop', // Pointer Events\n'Down', 'Move', 'Up', 'Cancel', 'Tap', 'DoubleTap', 'Hold'];\n\nvar getDisplayName = function (BaseComponent) {\n  return BaseComponent.displayName || 'Component';\n};\n\nvar reactable = function (BaseComponent) {\n  var _a;\n\n  return _a =\n  /*@__PURE__*/\n  function (superclass) {\n    function Reactable() {\n      superclass.apply(this, arguments);\n      this.node = createRef();\n    }\n\n    if (superclass) Reactable.__proto__ = superclass;\n    Reactable.prototype = Object.create(superclass && superclass.prototype);\n    Reactable.prototype.constructor = Reactable; // componentDidMount of parent is called after all his children is mounted\n\n    Reactable.prototype.componentDidMount = function componentDidMount() {\n      var this$1 = this;\n\n      if (!this.node.current) {\n        console.error(' you should apply getRef props in the dom element'); // eslint-disable-line\n\n        return;\n      }\n\n      this.interactable = interact(this.node.current);\n      options.forEach(function (option) {\n        if (option in this$1.props) {\n          this$1.interactable[option](this$1.props[option]);\n        }\n      });\n      events.forEach(function (event) {\n        var handler = this$1.props[\"on\" + event];\n\n        if (typeof handler === 'function') {\n          this$1.interactable.on(event.toLowerCase(), handler);\n        }\n      });\n    };\n\n    Reactable.prototype.componentWillUnmount = function componentWillUnmount() {\n      this.interactable.unset();\n    };\n\n    Reactable.prototype.baseProps = function baseProps(props) {\n      var baseProps = Object.assign({}, props);\n      options.forEach(function (option) {\n        return delete baseProps[option];\n      });\n      events.forEach(function (event) {\n        return delete baseProps[\"on\" + event];\n      });\n      return baseProps;\n    };\n\n    Reactable.prototype.render = function render() {\n      return createElement(BaseComponent, Object.assign({}, this.baseProps(this.props), {\n        getRef: this.node\n      }));\n    };\n\n    return Reactable;\n  }(Component), _a.displayName = \"reactable(\" + getDisplayName(BaseComponent) + \")\", _a;\n};\n\nexport default reactable;","map":null,"metadata":{},"sourceType":"module"}