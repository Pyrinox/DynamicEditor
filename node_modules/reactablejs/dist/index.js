function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var interact = _interopDefault(require('interactjs'));
var React = require('react');

var options = ['draggable', 'resizable', 'gesturable', 'dropzone'];
var events = [// Interact Events
'DragStart', 'DragMove', 'DragInertiaStart', 'DragEnd', 'ResizeStart', 'ResizeMove', 'ResizeInertiaStart', 'ResizeEnd', 'GestureStart', 'GestureMove', 'GestureEnd', // Drop Events
'DropActivate', 'DropdEactivate', 'DragEnter', 'DragLeave', 'DropMove', 'Drop', // Pointer Events
'Down', 'Move', 'Up', 'Cancel', 'Tap', 'DoubleTap', 'Hold'];

var getDisplayName = function (BaseComponent) { return BaseComponent.displayName || 'Component'; };

var reactable = function (BaseComponent) {
  var _a;

  return _a = /*@__PURE__*/(function (superclass) {
    function Reactable() {
      superclass.apply(this, arguments);
      this.node = React.createRef();
    }

    if ( superclass ) Reactable.__proto__ = superclass;
    Reactable.prototype = Object.create( superclass && superclass.prototype );
    Reactable.prototype.constructor = Reactable; // componentDidMount of parent is called after all his children is mounted


    Reactable.prototype.componentDidMount = function componentDidMount () {
      var this$1 = this;

      if (!this.node.current) {
        console.error(' you should apply getRef props in the dom element'); // eslint-disable-line

        return;
      }

      this.interactable = interact(this.node.current);
      options.forEach(function (option) {
        if (option in this$1.props) {
          this$1.interactable[option](this$1.props[option]);
        }
      });
      events.forEach(function (event) {
        var handler = this$1.props[("on" + event)];

        if (typeof handler === 'function') {
          this$1.interactable.on(event.toLowerCase(), handler);
        }
      });
    };

    Reactable.prototype.componentWillUnmount = function componentWillUnmount () {
      this.interactable.unset();
    };

    Reactable.prototype.baseProps = function baseProps (props) {
      var baseProps = Object.assign({}, props);
      options.forEach(function (option) { return delete baseProps[option]; });
      events.forEach(function (event) { return delete baseProps[("on" + event)]; });
      return baseProps;
    };

    Reactable.prototype.render = function render () {
      return React.createElement(BaseComponent, Object.assign({}, this.baseProps(this.props), {
        getRef: this.node
      }));
    };

    return Reactable;
  }(React.Component)), _a.displayName = "reactable(" + (getDisplayName(BaseComponent)) + ")", _a;
};

module.exports = reactable;
//# sourceMappingURL=index.js.map
