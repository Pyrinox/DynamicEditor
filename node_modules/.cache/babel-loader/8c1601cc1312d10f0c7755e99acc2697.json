{"ast":null,"code":"import _slicedToArray from \"/Users/pyrinox/Downloads/dynamic-editor-v1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pyrinox/Downloads/dynamic-editor-v1/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Editor } from 'slate-react';\nimport { Value } from 'slate';\nimport { BoldMark, ItalicMark } from './index'; // import Resizeable from './components/Resizeable';\n\nimport interact from 'interactjs'; // ========================================\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [{\n      object: 'block',\n      type: 'paragraph',\n      nodes: [{\n        object: 'text',\n        text: 'A line of text in a paragraph.'\n      }]\n    }]\n  }\n});\n\nfunction App() {\n  const _React$useState = React.useState({\n    value: initialValue,\n    x: 0,\n    y: 0,\n    width: 400,\n    height: 400,\n    angle: 0\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const onKeyDown = (e, change) => {\n    if (!e.metaKey) {\n      return;\n    }\n\n    e.preventDefault();\n    console.log('what');\n\n    switch (e.key) {\n      case 'b':\n        {\n          console.log('here??');\n          change.toggleMark('bold');\n          return true;\n        }\n\n      case 'i':\n        {\n          change.toggleMark('italic');\n          return true;\n        }\n    }\n  };\n\n  const renderMark = props => {\n    switch (props.mark.type) {\n      case 'bold':\n        return React.createElement(BoldMark, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }));\n\n      case 'italic':\n        return React.createElement(ItalicMark, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }));\n    }\n  }; //  Testing Reactable Event handler functions\n  //  ================================================\n\n\n  const handleDragMove = e => {\n    const dx = e.dx,\n          dy = e.dy;\n    setState({\n      x: state.x + dx,\n      y: state.y + dy\n    });\n  };\n\n  const handleGestureMove = e => {\n    const da = e.da;\n    setState(state => ({\n      angle: state.angle + da\n    }));\n  }; // const handleResizeMove = (e) => {\n  //   const { width, height } = e.rect\n  //   const { left, top } = e.deltaRect\n  //   setState(({state}) => ({\n  //       x: state.x + left,\n  //       y: state.y + top,\n  //       width,\n  //       height\n  //     }\n  //   ))\n  // }\n  //  ================================================\n\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Interactable, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(Editor, {\n    value: state.value,\n    onChange: ({\n      value\n    }) => setState({\n      value\n    }),\n    onKeyDown: onKeyDown,\n    renderMark: renderMark,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pyrinox/Downloads/dynamic-editor-v1/src/App.js"],"names":["React","Editor","Value","BoldMark","ItalicMark","interact","initialValue","fromJSON","document","nodes","object","type","text","App","useState","value","x","y","width","height","angle","state","setState","onKeyDown","e","change","metaKey","preventDefault","console","log","key","toggleMark","renderMark","props","mark","handleDragMove","dx","dy","handleGestureMove","da"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Editor } from 'slate-react';\nimport { Value } from 'slate';\nimport { BoldMark, ItalicMark } from './index';\n\n\n\n// import Resizeable from './components/Resizeable';\n\n\n\nimport interact from 'interactjs';\n\n\n\n\n\n\n\n// ========================================\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: 'block',\n        type: 'paragraph',\n        nodes: [\n          {\n            object: 'text',\n            text: 'A line of text in a paragraph.',\n          },\n        ],\n      },\n    ],\n  },\n})\n\n\nfunction App() {\n  const [state, setState] = React.useState({\n    value: initialValue,\n    x: 0,\n    y: 0,\n    width: 400,\n    height: 400,\n    angle: 0,\n    }\n  );\n  \n  const onKeyDown = (e, change) => {\n    if (!e.metaKey) {return}\n    e.preventDefault()\n    console.log('what')\n    switch (e.key) {\n      case 'b': {\n        console.log('here??')\n        change.toggleMark('bold')\n        return true\n      }\n      case 'i': {\n        change.toggleMark('italic')\n        return true\n      }\n    }\n  }\n\n  const renderMark = props => {\n    switch (props.mark.type) {\n      case 'bold':\n        return <BoldMark {...props} />\n      case 'italic':\n        return <ItalicMark {...props} />\n    }\n  }\n  \n\n//  Testing Reactable Event handler functions\n//  ================================================\n\n  const handleDragMove = (e) => {\n    const { dx, dy } = e\n    setState({\n      x: state.x + dx,\n      y: state.y + dy,\n    })\n  }\n  const handleGestureMove = (e) => {\n    const { da } = e\n    setState(state => ({\n      angle: state.angle + da\n    }))\n  }\n  // const handleResizeMove = (e) => {\n  //   const { width, height } = e.rect\n  //   const { left, top } = e.deltaRect\n  //   setState(({state}) => ({\n  //       x: state.x + left,\n  //       y: state.y + top,\n  //       width,\n  //       height\n  //     }\n  //   ))\n  // }\n\n\n\n\n//  ================================================\n\n\n  return (\n    <div className=\"App\">\n      <Interactable/>\n      <Editor \n        value={state.value} \n        onChange={ ({value}) => setState({value}) } \n        onKeyDown={ onKeyDown }\n        renderMark={ renderMark }\n        />\n    </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}